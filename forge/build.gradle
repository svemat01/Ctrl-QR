plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "ctrlqr-common.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", rootProject.mod_version

    inputs.property "name", rootProject.mod_name
    inputs.property "description", rootProject.mod_description
    inputs.property "author", rootProject.mod_author
    inputs.property "sources", rootProject.mod_sources

    filesMatching("META-INF/mods.toml") {
        expand "version": rootProject.mod_version,
                "name": rootProject.mod_name,
                "description": rootProject.mod_description,
                "author": rootProject.mod_author,
                "sources": rootProject.mod_sources
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

// "borrowed" from REI
unifiedPublishing {
    project {
        displayName = "[Forge ${rootProject.minecraft_version}] v${rootProject.mod_version}"
        releaseType = "beta"
        gameVersions = ["1.18", "1.18.1", "1.18.2", "1.19", "1.19.1", "1.19.2"]
        gameLoaders = ["forge"]
        changelog = rootProject.releaseChangelog

        mainPublication remapJar

        if (project.hasProperty("curseforge_token") || System.getenv("curseforge_token") != null) {
            curseforge {
                token = project.hasProperty("curseforge_token") ? project.property("curseforge_token") : System.getenv("curseforge_token")
                id = "ZZZZZZ"
                gameVersions.addAll "Java 17"
            }
        }

        if (project.hasProperty("modrinth_token") || System.getenv("modrinth_token") != null) {
            modrinth {
                token = project.hasProperty("modrinth_token") ? project.property("modrinth_token") : System.getenv("modrinth_token")
                id = "ZZZZZZ"
                version = "${rootProject.mod_version}+${project.name}"
            }
        }
    }
}
